#!/usr/local/bin/hook
---
component: postgresql
kinds:
- apiVersion: illallangi.enterprises/v1alpha1
  kind: Mastodon
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata: {{ _component.metadata }}
spec:
  replicas: 1
  selector:
    matchLabels: {{ _component.selector }}
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: postgresql
      labels: {{ _component.selector }}
    spec:
      containers:
      - env:
        - name: POSTGRES_PASSWORD
          valueFrom: {{ _component.spec.postgresql.password }}
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: username
              name: "{{ _component.metadata.name }}"
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: database
              name: "{{ _component.metadata.name }}"
        image: {{ 'IMAGE_POSTGRES' | getenv }}
        imagePullPolicy: "IfNotPresent"
        lifecycle:
          preStop:
            exec:
              command:
              - "pg_ctl"
              - "stop"
              - "-m"
              - "fast"
              - "-w"
        livenessProbe:
          exec:
            command:
            - "pg_isready"
        name: "postgresql"
        ports:
        - containerPort: 5432
          name: postgresql
        resources: {}
        startupProbe:
          exec:
            command:
            - "pg_isready"
          failureThreshold: 30
        volumeMounts:
        - mountPath: "/var/lib/postgresql/data"
          name: "persistence"
          subPath: "var/lib/postgresql/data"
{% if _component.spec.postgresql is defined
   and _component.spec.postgresql.backup is defined %}
      - env:
          - name: PRE_COMMANDS
            value: restic unlock --remove-all
          - name: "RUN_ON_STARTUP"
            value: "true"
          - name: "BACKUP_CRON"
            value: "{{ _component.spec.postgresql.backup.schedule }}"
          - name: "RESTIC_BACKUP_SOURCES"
            value: /var/lib/postgresql/data
          - name: "RESTIC_BACKUP_ARGS"
            value: --verbose --host {{ _component.metadata.name }}.{{ _component.metadata.namespace }}.svc.cluster.local --tag postgresql
          - name: "RESTIC_FORGET_ARGS"
            value: --keep-last 10 --keep-daily 7 --keep-weekly 5 --keep-monthly 12
          - name: "RESTIC_REPOSITORY"
            value: "{{ _component.spec.postgresql.backup.b2repo }}:/{{ _component.metadata.namespace }}/{{ _component.metadata.name }}"
          - name: "TZ"
            value: "Australia/Melbourne"
          - name: "RESTIC_PASSWORD"
            valueFrom: {{ _component.spec.postgresql.backup.resticPassword }}
          - name: "B2_ACCOUNT_ID"
            valueFrom: {{ _component.spec.postgresql.backup.b2AccountId }}
          - name: "B2_ACCOUNT_KEY"
            valueFrom: {{ _component.spec.postgresql.backup.b2AccountKey }}
        image: {{ 'IMAGE_RESTIC' | getenv }}
        imagePullPolicy: IfNotPresent
        name: backup
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: persistence
          subPath: var/lib/postgresql/data
{% endif %}
      serviceAccount: "{{ _instance.metadata.name }}"
      serviceAccountName: "{{ _instance.metadata.name }}"
      volumes:
      - persistentVolumeClaim:
          claimName: "{{ _component.metadata.name }}"
        name: "persistence"