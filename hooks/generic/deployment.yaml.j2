#!/usr/local/bin/hook
---
kinds:
- apiVersion: illallangi.enterprises/v1alpha1
  kind: Generic
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata: {{ _instance.metadata }}
spec:
  replicas: 1
  selector:
    matchLabels: {{ _instance.selector }}
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: generic
      labels: {{ _instance.selector }}
    spec:
      containers:
      - 
{% if _instance.spec.generic.extraEnv is defined %}
        env:
{% for env in _instance.spec.generic.extraEnv %}
        - name: "{{ env.name }}"
{% if env.valueFrom is defined %}
          valueFrom: {{ env.valueFrom }}
{% else %}
          value: "{{ env.value }}"
{% endif %}
{% endfor %}
{% endif %}
        image: {{ _instance.spec.generic.image }}
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            port: http
        name: "generic"
        ports:
        - containerPort: {{ _instance.spec.generic.port }}
          name: http
        resources: {}
        startupProbe:
          httpGet:
            port: http
          failureThreshold: 30
{% if _component.spec.generic.data is defined %}
        volumeMounts:
{%- for data in _component.spec.generic.data %}
        - mountPath: "{{ data.path }}"
          name: "{{ data.name }}"
          readOnly: true
          subPath: "{{ data.subPath}}"
{%- endfor %}
{%- endif %}
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      serviceAccount: "{{ _instance.metadata.name }}"
      serviceAccountName: "{{ _instance.metadata.name }}"
{% if _component.spec.generic.data is defined %}
      volumes:
{% for data in _component.spec.generic.data %}
      - persistentVolumeClaim:
          claimName: "{{ data.name }}"
        name: "{{ data.name }}"
{% endfor %}
{% endif %}
