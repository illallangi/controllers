#!/usr/local/bin/hook
---
kinds:
- apiVersion: illallangi.enterprises/v1alpha1
  kind: Tandoor
---
apiVersion: apps/v1
kind: Deployment
metadata: {{ _instance.metadata }}
spec:
  replicas: 1
  selector:
    matchLabels: {{ _instance.selector }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: tandoor
      labels: {{ _instance.selector }}
    spec:
      containers:
      - env:
        - name: SECRET_KEY
          valueFrom: {{ _instance.spec.tandoor.secretKey }}
        - name: TANDOOR_PORT
          value: "8080"
        - name: DB_ENGINE
          value: django.db.backends.postgresql
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: hostname
              name: "{{ _instance.metadata.name }}-postgresql"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: username
              name: "{{ _instance.metadata.name }}-postgresql"
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: database
              name: "{{ _instance.metadata.name }}-postgresql"
        - name: POSTGRES_PASSWORD
          valueFrom: {{ _instance.spec.postgresql.password }}
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: port
              name: "{{ _instance.metadata.name }}-postgresql"
        image: {{ 'IMAGE_TANDOOR' | getenv }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: http
        name: tandoor
        ports:
        - containerPort: 8080
          name: http
        resources: {}
        startupProbe:
          failureThreshold: 30
          tcpSocket:
            port: http
        volumeMounts:
        - mountPath: "/opt/recipes/staticfiles"
          name: "persistence"
          subPath: "staticfiles"
        - mountPath: "/opt/recipes/mediafiles"
          name: "persistence"
          subPath: "mediafiles"
{% if _component.spec.tandoor is defined
   and _component.spec.tandoor.backup is defined %}
      - env:
          - name: PRE_COMMANDS
            value: restic unlock --remove-all
          - name: "RUN_ON_STARTUP"
            value: "true"
          - name: "BACKUP_CRON"
            value: "{{ _component.spec.tandoor.backup.schedule }}"
          - name: "RESTIC_BACKUP_SOURCES"
            value: /opt/recipes
          - name: "RESTIC_BACKUP_ARGS"
            value: --verbose --host {{ _component.metadata.name }}.{{ _component.metadata.namespace }}.svc.cluster.local --tag tandoor
          - name: "RESTIC_FORGET_ARGS"
            value: --keep-last 10 --keep-daily 7 --keep-weekly 5 --keep-monthly 12
          - name: "RESTIC_REPOSITORY"
            value: "{{ _component.spec.tandoor.backup.b2repo }}:/{{ _component.metadata.namespace }}/{{ _component.metadata.name }}"
          - name: "TZ"
            value: "Australia/Melbourne"
          - name: "RESTIC_PASSWORD"
            valueFrom: {{ _component.spec.tandoor.backup.resticPassword }}
          - name: "B2_ACCOUNT_ID"
            valueFrom: {{ _component.spec.tandoor.backup.b2AccountId }}
          - name: "B2_ACCOUNT_KEY"
            valueFrom: {{ _component.spec.tandoor.backup.b2AccountKey }}
        image: {{ 'IMAGE_RESTIC' | getenv }}
        imagePullPolicy: IfNotPresent
        name: backup
        volumeMounts:
        - mountPath: "/opt/recipes"
          name: "persistence"
          subPath: "opt/recipes"
{% endif %}
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      initContainers:
      - args:
        - "service"
        - "{{ _instance.metadata.name }}-postgresql"
        - "--namespace {{ _instance.metadata.namespace }}"
        image: {{ 'IMAGE_K8SWAITFOR' | getenv }}
        imagePullPolicy: "IfNotPresent"
        name: "init-postgresql"
        resources: {}
      serviceAccount: {{ _instance.metadata.name }}
      serviceAccountName: {{ _instance.metadata.name }}
      volumes:
      - persistentVolumeClaim:
          claimName: "{{ _instance.metadata.name }}"
        name: "persistence"