#!/usr/local/bin/hook
---
kinds:
- apiVersion: illallangi.enterprises/v1alpha1
  kind: ESPHome
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata: {{ _instance.metadata }}
spec:
  replicas: 1
  selector:
    matchLabels: {{ _instance.selector }}
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: esphome
      labels: {{ _instance.selector }}
    spec:
      containers:
      - image: ghcr.io/esphome/esphome:2023.12.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: "http"
        name: "esphome"
        ports:
        - containerPort: 6052
          name: http
        resources: {}
        startupProbe:
          failureThreshold: 30
          tcpSocket:
            port: http
        volumeMounts:
        - mountPath: /config
          name: persistence
          subPath: config
{% if _instance.spec.tailscale is defined %}
      - image: docker.io/library/caddy:2.6.4
        imagePullPolicy: IfNotPresent
        name: caddy
        volumeMounts:
        - mountPath: /etc/caddy/Caddyfile
          name: tailscale
          subPath: Caddyfile
        - mountPath: "/var/run/tailscale"
          name: "persistence"
          subPath: "var/run/tailscale"
      - env:
        - name: TS_KUBE_SECRET
          value: {{ _instance.metadata.name }}-tailscale
        - name: TS_EXTRA_ARGS
          value: --hostname={{ _instance.spec.esphome.webDomain | regex_search('^([a-z][a-z0-9-]*)\.great-tuna\.ts\.net$', '\\1') | first() }}
        - name: TS_AUTH_KEY
          valueFrom: {{ _instance.spec.tailscale.apiToken }}
        image: ghcr.io/tailscale/tailscale:v1.56.1
        imagePullPolicy: IfNotPresent
        name: tailscale
        resources: {}
        volumeMounts:
        - mountPath: /tmp
          name: persistence
          subPath: var/run/tailscale
{% endif %}
{% if _component.spec.esphome is defined
   and _component.spec.esphome.backup is defined %}
      - env:
          - name: "RUN_ON_STARTUP"
            value: "true"
          - name: "BACKUP_CRON"
            value: "{{ _component.spec.esphome.backup.schedule }}"
          - name: "RESTIC_BACKUP_SOURCES"
            value: /config
          - name: "RESTIC_BACKUP_ARGS"
            value: --verbose --host {{ _component.metadata.name }}.{{ _component.metadata.namespace }}.svc.cluster.local --tag esphome
          - name: "RESTIC_FORGET_ARGS"
            value: --keep-last 10 --keep-daily 7 --keep-weekly 5 --keep-monthly 12
          - name: "RESTIC_REPOSITORY"
            value: "{{ _component.spec.esphome.backup.b2repo }}:/{{ _component.metadata.namespace }}/{{ _component.metadata.name }}"
          - name: "TZ"
            value: "Australia/Melbourne"
          - name: "RESTIC_PASSWORD"
            valueFrom: {{ _component.spec.esphome.backup.resticPassword }}
          - name: "B2_ACCOUNT_ID"
            valueFrom: {{ _component.spec.esphome.backup.b2AccountId }}
          - name: "B2_ACCOUNT_KEY"
            valueFrom: {{ _component.spec.esphome.backup.b2AccountKey }}
        image: docker.io/mazzolino/restic:1.7.1
        imagePullPolicy: IfNotPresent
        name: backup
        volumeMounts:
        - mountPath: /config
          name: persistence
          subPath: config
{% endif %}
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      serviceAccount: {{ _instance.metadata.name }}
      serviceAccountName: {{ _instance.metadata.name }}
      volumes:
      - persistentVolumeClaim:
          claimName: {{ _instance.metadata.name }}
        name: "persistence"
      - name: "tailscale"
        projected:
          sources:
          - configMap:
              items:
              - key: "Caddyfile"
                path: "Caddyfile"
              name: "{{ _instance.metadata.name }}-tailscale"
