#!/usr/local/bin/hook
---
kinds:
- apiVersion: illallangi.enterprises/v1alpha1
  kind: Data
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata: {{ _instance.metadata }}
spec:
  replicas: 1
  selector:
    matchLabels: {{ _instance.selector }}
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: toolbox
      labels: {{ _instance.selector }}
    spec:
      containers:
      - image: {{ 'IMAGE_TOOLBOX' | getenv }}
        imagePullPolicy: "IfNotPresent"
        name: "toolbox"
        resources: {}
        volumeMounts:
        - mountPath: "/data"
          name: "persistence"
          subPath: "data"
{% if _component.spec.data is defined
   and _component.spec.data.backup is defined %}
      - env:
          - name: PRE_COMMANDS
            value: restic unlock --remove-all
          - name: "RUN_ON_STARTUP"
            value: "true"
          - name: "BACKUP_CRON"
            value: "{{ _component.spec.data.backup.schedule }}"
          - name: "RESTIC_BACKUP_SOURCES"
            value: /data
          - name: "RESTIC_BACKUP_ARGS"
            value: --verbose --host {{ _component.metadata.name }}.{{ _component.metadata.namespace }}.svc.cluster.local --tag data{% for exclude in _component.spec.data.backup.exclude %} --exclude {{ exclude }}{% endfor %}
          - name: "RESTIC_FORGET_ARGS"
            value: --keep-last 10 --keep-daily 7 --keep-weekly 5 --keep-monthly 12
          - name: "RESTIC_REPOSITORY"
            value: "{{ _component.spec.data.backup.b2repo }}:/{{ _component.metadata.namespace }}/{{ _component.metadata.name }}"
          - name: "TZ"
            value: "Australia/Melbourne"
          - name: "RESTIC_PASSWORD"
            valueFrom: {{ _component.spec.data.backup.resticPassword }}
          - name: "B2_ACCOUNT_ID"
            valueFrom: {{ _component.spec.data.backup.b2AccountId }}
          - name: "B2_ACCOUNT_KEY"
            valueFrom: {{ _component.spec.data.backup.b2AccountKey }}
        image: {{ 'IMAGE_RESTIC' | getenv }}
        imagePullPolicy: IfNotPresent
        name: backup
        volumeMounts:
        - mountPath: "/data"
          name: "persistence"
          subPath: "data"
{% endif %}
{% if _instance.spec.tailscale is defined %}
      - command:
        - "/usr/local/bin/samba.sh"
        env:
{% if _instance.spec.data.user.secretRef is defined %}
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ _instance.spec.data.user.secretRef.name }}
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ _instance.spec.data.user.secretRef.name }}
        - name: USERID
          valueFrom:
            secretKeyRef:
              key: uid
              name: {{ _instance.spec.data.user.secretRef.name }}
        - name: GROUPID
          valueFrom:
            secretKeyRef:
              key: gid
              name: {{ _instance.spec.data.user.secretRef.name }}
{% else %}
        - name: USERNAME
          valueFrom: {{ _instance.spec.data.user.username }}
        - name: PASSWORD
          valueFrom: {{ _instance.spec.data.user.password }}
        - name: USERID
          valueFrom: {{ _instance.spec.data.user.uid }}
        - name: GROUPID
          valueFrom: {{ _instance.spec.data.user.gid }}
{% endif %}
        image: docker.io/dperson/samba:latest
        imagePullPolicy: IfNotPresent
        name: samba
        ports:
        - containerPort: 139
          name: netbios-ssn
          protocol: TCP
        - containerPort: 445
          name: microsoft-ds
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: "/{{ _instance.spec.tailscale.tsDomain | regex_search('^([a-z][a-z0-9-]*)\.great-tuna\.ts\.net$', '\\1') | first() }}"
          name: "persistence"
          subPath: "data"
        - mountPath: "/usr/local/bin/samba.sh"
          name: "tailscale"
          subPath: "samba.sh"
      - env:
        - name: TS_KUBE_SECRET
          value: {{ _instance.metadata.name }}-tailscale
        - name: TS_EXTRA_ARGS
          value: --hostname={{ _instance.spec.tailscale.tsDomain | regex_search('^([a-z][a-z0-9-]*)\.great-tuna\.ts\.net$', '\\1') | first() }}
        - name: TS_AUTH_KEY
          valueFrom: {{ _instance.spec.tailscale.apiToken }}
        image: {{ 'IMAGE_TAILSCALE' | getenv }}
        imagePullPolicy: IfNotPresent
        name: tailscale
        resources: {}
{% endif %}
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      serviceAccount: {{ _instance.metadata.name }}
      serviceAccountName: {{ _instance.metadata.name }}
      volumes:
      - persistentVolumeClaim:
          claimName: {{ _instance.metadata.name }}
        name: "persistence"
      - name: "tailscale"
        projected:
          sources:
          - configMap:
              items:
              - key: samba.sh
                path: samba.sh
                mode: 493
              name: "{{ _instance.metadata.name }}-tailscale"
