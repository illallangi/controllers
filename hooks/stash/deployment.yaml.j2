#!/usr/local/bin/hook
---
kinds:
- apiVersion: illallangi.enterprises/v1alpha1
  kind: Stash
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata: {{ _instance.metadata }}
spec:
  replicas: 1
  selector:
    matchLabels: {{ _instance.selector }}
  strategy:
    type: "Recreate"
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: stash
      labels: {{ _instance.selector }}
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: "{{ _instance.metadata.name }}"
        image: {{ 'IMAGE_STASH' | getenv }}
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            port: http
        name: "stash"
        ports:
        - containerPort: 9999
          name: http
        resources: {}
        startupProbe:
          httpGet:
            port: http
          failureThreshold: 30
        volumeMounts:
        - mountPath: "/data"
          name: "data"
          readOnly: true
          subPath: "{{ _component.spec.stash.data.subPath }}"
        - mountPath: "/root/.stash"
          name: "persistence"
          subPath: "root/.stash"
        - mountPath: "/stash"
          name: "persistence"
          subPath: "stash"
{% if _instance.spec.tailscale is defined %}
      - image: {{ 'IMAGE_CADDY' | getenv }}
        imagePullPolicy: IfNotPresent
        name: caddy
        volumeMounts:
        - mountPath: /etc/caddy/Caddyfile
          name: tailscale
          subPath: Caddyfile
        - mountPath: "/var/run/tailscale"
          name: "persistence"
          subPath: "var/run/tailscale"
      - env:
        - name: TS_KUBE_SECRET
          value: {{ _instance.metadata.name }}-tailscale
        - name: TS_EXTRA_ARGS
          value: --hostname={{ _instance.spec.stash.webDomain | regex_search('^([a-z][a-z0-9-]*)\.great-tuna\.ts\.net$', '\\1') | first() }}
        - name: TS_AUTH_KEY
          valueFrom: {{ _instance.spec.tailscale.apiToken }}
        image: {{ 'IMAGE_TAILSCALE' | getenv }}
        imagePullPolicy: IfNotPresent
        name: tailscale
        resources: {}
        volumeMounts:
        - mountPath: /tmp
          name: persistence
          subPath: var/run/tailscale
{% endif %}
{% if _component.spec.stash is defined
   and _component.spec.stash.backup is defined %}
      - env:
          - name: PRE_COMMANDS
            value: restic unlock --remove-all
          - name: "RUN_ON_STARTUP"
            value: "true"
          - name: "BACKUP_CRON"
            value: "{{ _component.spec.stash.backup.schedule }}"
          - name: "RESTIC_BACKUP_SOURCES"
            value: /stash /root/.stash
          - name: "RESTIC_BACKUP_ARGS"
            value: --verbose --host {{ _component.metadata.name }}.{{ _component.metadata.namespace }}.svc.cluster.local --tag stash
          - name: "RESTIC_FORGET_ARGS"
            value: --keep-last 10 --keep-daily 7 --keep-weekly 5 --keep-monthly 12
          - name: "RESTIC_REPOSITORY"
            value: "{{ _component.spec.stash.backup.b2repo }}:/{{ _component.metadata.namespace }}/{{ _component.metadata.name }}"
          - name: "TZ"
            value: "Australia/Melbourne"
          - name: "RESTIC_PASSWORD"
            valueFrom: {{ _component.spec.stash.backup.resticPassword }}
          - name: "B2_ACCOUNT_ID"
            valueFrom: {{ _component.spec.stash.backup.b2AccountId }}
          - name: "B2_ACCOUNT_KEY"
            valueFrom: {{ _component.spec.stash.backup.b2AccountKey }}
        image: {{ 'IMAGE_RESTIC' | getenv }}
        imagePullPolicy: IfNotPresent
        name: backup
        volumeMounts:
        - mountPath: "/root/.stash"
          name: "persistence"
          subPath: "root/.stash"
        - mountPath: "/stash"
          name: "persistence"
          subPath: "stash"
{% endif %}
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      initContainers:
      - envFrom:
        - configMapRef:
            name: "{{ _instance.metadata.name }}"
        command:
        - /usr/local/bin/init-config.sh
        image: {{ 'IMAGE_TOOLBOX' | getenv }}
        imagePullPolicy: IfNotPresent
        name: init-config
        volumeMounts:
        - mountPath: "/root/.stash"
          name: "persistence"
          subPath: "root/.stash"
        - mountPath: "/stash"
          name: "persistence"
          subPath: "stash"
        - mountPath: "/root/.stash/config.yml.template"
          name: "config"
          subPath: "config.yml.template"
        - mountPath: "/usr/local/bin/init-config.sh"
          name: "config"
          subPath: "init-config.sh"
      serviceAccount: "{{ _instance.metadata.name }}"
      serviceAccountName: "{{ _instance.metadata.name }}"
      volumes:
      - persistentVolumeClaim:
          claimName: "{{ _instance.metadata.name }}"
        name: "persistence"
      - persistentVolumeClaim:
          claimName: "{{ _instance.spec.stash.data.name }}"
        name: "data"
      - name: "config"
        projected:
          sources:
          - configMap:
              items:
              - key: "init-config.sh"
                path: "init-config.sh"
                mode: 493
              - key: "config.yml.template"
                path: "config.yml.template"
              name: "{{ _instance.metadata.name }}"
            name: "{{ _instance.metadata.name }}"
      - name: "tailscale"
        projected:
          sources:
          - configMap:
              items:
              - key: "Caddyfile"
                path: "Caddyfile"
              name: "{{ _instance.metadata.name }}-tailscale"
